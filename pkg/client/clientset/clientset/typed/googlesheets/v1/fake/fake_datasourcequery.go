// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1 "github.com/grafana/google-sheets-datasource/pkg/apis/googlesheets/v1"
	googlesheetsv1 "github.com/grafana/google-sheets-datasource/pkg/client/applyconfiguration/googlesheets/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeDatasourceQueries implements DatasourceQueryInterface
type FakeDatasourceQueries struct {
	Fake *FakeGooglesheetsV1
	ns   string
}

var datasourcequeriesResource = v1.SchemeGroupVersion.WithResource("datasourcequeries")

var datasourcequeriesKind = v1.SchemeGroupVersion.WithKind("DatasourceQuery")

// Get takes name of the datasourceQuery, and returns the corresponding datasourceQuery object, and an error if there is any.
func (c *FakeDatasourceQueries) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.DatasourceQuery, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(datasourcequeriesResource, c.ns, name), &v1.DatasourceQuery{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.DatasourceQuery), err
}

// List takes label and field selectors, and returns the list of DatasourceQueries that match those selectors.
func (c *FakeDatasourceQueries) List(ctx context.Context, opts metav1.ListOptions) (result *v1.DatasourceQueryList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(datasourcequeriesResource, datasourcequeriesKind, c.ns, opts), &v1.DatasourceQueryList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.DatasourceQueryList), err
}

// Watch returns a watch.Interface that watches the requested datasourceQueries.
func (c *FakeDatasourceQueries) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(datasourcequeriesResource, c.ns, opts))

}

// Create takes the representation of a datasourceQuery and creates it.  Returns the server's representation of the datasourceQuery, and an error, if there is any.
func (c *FakeDatasourceQueries) Create(ctx context.Context, datasourceQuery *v1.DatasourceQuery, opts metav1.CreateOptions) (result *v1.DatasourceQuery, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(datasourcequeriesResource, c.ns, datasourceQuery), &v1.DatasourceQuery{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.DatasourceQuery), err
}

// Update takes the representation of a datasourceQuery and updates it. Returns the server's representation of the datasourceQuery, and an error, if there is any.
func (c *FakeDatasourceQueries) Update(ctx context.Context, datasourceQuery *v1.DatasourceQuery, opts metav1.UpdateOptions) (result *v1.DatasourceQuery, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(datasourcequeriesResource, c.ns, datasourceQuery), &v1.DatasourceQuery{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.DatasourceQuery), err
}

// Delete takes name of the datasourceQuery and deletes it. Returns an error if one occurs.
func (c *FakeDatasourceQueries) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(datasourcequeriesResource, c.ns, name, opts), &v1.DatasourceQuery{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeDatasourceQueries) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(datasourcequeriesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1.DatasourceQueryList{})
	return err
}

// Patch applies the patch and returns the patched datasourceQuery.
func (c *FakeDatasourceQueries) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.DatasourceQuery, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(datasourcequeriesResource, c.ns, name, pt, data, subresources...), &v1.DatasourceQuery{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.DatasourceQuery), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied datasourceQuery.
func (c *FakeDatasourceQueries) Apply(ctx context.Context, datasourceQuery *googlesheetsv1.DatasourceQueryApplyConfiguration, opts metav1.ApplyOptions) (result *v1.DatasourceQuery, err error) {
	if datasourceQuery == nil {
		return nil, fmt.Errorf("datasourceQuery provided to Apply must not be nil")
	}
	data, err := json.Marshal(datasourceQuery)
	if err != nil {
		return nil, err
	}
	name := datasourceQuery.Name
	if name == nil {
		return nil, fmt.Errorf("datasourceQuery.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(datasourcequeriesResource, c.ns, *name, types.ApplyPatchType, data), &v1.DatasourceQuery{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.DatasourceQuery), err
}
