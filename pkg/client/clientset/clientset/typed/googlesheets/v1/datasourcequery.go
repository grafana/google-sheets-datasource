// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/grafana/google-sheets-datasource/pkg/apis/googlesheets/v1"
	scheme "github.com/grafana/google-sheets-datasource/pkg/client/clientset/clientset/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	rest "k8s.io/client-go/rest"
)

// DatasourceQueriesGetter has a method to return a DatasourceQueryInterface.
// A group's client should implement this interface.
type DatasourceQueriesGetter interface {
	DatasourceQueries(namespace string) DatasourceQueryInterface
}

// DatasourceQueryInterface has methods to work with DatasourceQuery resources.
type DatasourceQueryInterface interface {
	Create(ctx context.Context, datasourceQuery *v1.DatasourceQuery, opts metav1.CreateOptions) (*v1.DatasourceQuery, error)
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.DatasourceQuery, error)
	DatasourceQueryExpansion
}

// datasourceQueries implements DatasourceQueryInterface
type datasourceQueries struct {
	client rest.Interface
	ns     string
}

// newDatasourceQueries returns a DatasourceQueries
func newDatasourceQueries(c *GooglesheetsV1Client, namespace string) *datasourceQueries {
	return &datasourceQueries{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the datasourceQuery, and returns the corresponding datasourceQuery object, and an error if there is any.
func (c *datasourceQueries) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.DatasourceQuery, err error) {
	result = &v1.DatasourceQuery{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("datasourcequeries").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// Create takes the representation of a datasourceQuery and creates it.  Returns the server's representation of the datasourceQuery, and an error, if there is any.
func (c *datasourceQueries) Create(ctx context.Context, datasourceQuery *v1.DatasourceQuery, opts metav1.CreateOptions) (result *v1.DatasourceQuery, err error) {
	result = &v1.DatasourceQuery{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("datasourcequeries").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(datasourceQuery).
		Do(ctx).
		Into(result)
	return
}

// DeleteCollection deletes a collection of objects.
func (c *datasourceQueries) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("datasourcequeries").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}



