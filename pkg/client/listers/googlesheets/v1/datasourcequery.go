// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/grafana/google-sheets-datasource/pkg/apis/googlesheets/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatasourceQueryLister helps list DatasourceQueries.
// All objects returned here must be treated as read-only.
type DatasourceQueryLister interface {
	// List lists all DatasourceQueries in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.DatasourceQuery, err error)
	// DatasourceQueries returns an object that can list and get DatasourceQueries.
	DatasourceQueries(namespace string) DatasourceQueryNamespaceLister
	DatasourceQueryListerExpansion
}

// datasourceQueryLister implements the DatasourceQueryLister interface.
type datasourceQueryLister struct {
	indexer cache.Indexer
}

// NewDatasourceQueryLister returns a new DatasourceQueryLister.
func NewDatasourceQueryLister(indexer cache.Indexer) DatasourceQueryLister {
	return &datasourceQueryLister{indexer: indexer}
}

// List lists all DatasourceQueries in the indexer.
func (s *datasourceQueryLister) List(selector labels.Selector) (ret []*v1.DatasourceQuery, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DatasourceQuery))
	})
	return ret, err
}

// DatasourceQueries returns an object that can list and get DatasourceQueries.
func (s *datasourceQueryLister) DatasourceQueries(namespace string) DatasourceQueryNamespaceLister {
	return datasourceQueryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatasourceQueryNamespaceLister helps list and get DatasourceQueries.
// All objects returned here must be treated as read-only.
type DatasourceQueryNamespaceLister interface {
	// List lists all DatasourceQueries in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.DatasourceQuery, err error)
	// Get retrieves the DatasourceQuery from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.DatasourceQuery, error)
	DatasourceQueryNamespaceListerExpansion
}

// datasourceQueryNamespaceLister implements the DatasourceQueryNamespaceLister
// interface.
type datasourceQueryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatasourceQueries in the indexer for a given namespace.
func (s datasourceQueryNamespaceLister) List(selector labels.Selector) (ret []*v1.DatasourceQuery, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DatasourceQuery))
	})
	return ret, err
}

// Get retrieves the DatasourceQuery from the indexer for a given namespace and name.
func (s datasourceQueryNamespaceLister) Get(name string) (*v1.DatasourceQuery, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("datasourcequery"), name)
	}
	return obj.(*v1.DatasourceQuery), nil
}
